name: Docs

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  update-changelog:
    name: Changelog
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Get changed crates and versions
        id: versions
        run: |
          # Get all workspace members
          IFS=$'\n' read -d '' -r -a members < <(grep -o '"[^"]*"' crates/*/Cargo.toml | tr -d '"')
          
          # Initialize version info
          VERSION_INFO="\n"
          FOUND_CHANGES=false

          # Check each crate for version changes
          for member in "${members[@]}"; do
            version_file="crates/$member/Cargo.toml"
            
            # Get current version from PR
            current_version=$(git show ${{ github.sha }}:"$version_file" 2>/dev/null | grep -m1 '^version = ' | cut -d'"' -f2 || echo "")
            
            # Get main branch version
            main_version=$(git show ${{ github.event.pull_request.base.sha }}:"$version_file" 2>/dev/null | grep -m1 '^version = ' | cut -d'"' -f2 || echo "")
            
            # Skip if version couldn't be determined or hasn't changed
            [ -z "$current_version" ] && continue
            [ -z "$main_version" ] && main_version="0.0.0"
            [ "$current_version" = "$main_version" ] && continue
            
            FOUND_CHANGES=true
            
            # Determine version change type
            if [ "$main_version" = "0.0.0" ]; then
              emoji="üü¢"
              change_type="new crate"
            else
              IFS='.' read -r -a main_parts <<< "$main_version"
              IFS='.' read -r -a current_parts <<< "$current_version"
              
              main_major=${main_parts[0]}
              current_major=${current_parts[0]}
              
              if [ "$current_major" -gt "$main_major" ]; then
                emoji="üî¥"
                change_type="major bump"
              else
                main_minor=${main_parts[1]:-0}
                current_minor=${current_parts[1]:-0}
                
                if [ "$current_minor" -gt "$main_minor" ]; then
                  emoji="üü°"
                  change_type="minor bump"
                else
                  emoji="üü¢"
                  change_type="patch bump"
                fi
              fi
            fi
            
            VERSION_INFO+="- $emoji **$member**: $main_version ‚Üí $current_version ($change_type)\n"
          done
          
          # If no changes found, indicate that
          if [ "$FOUND_CHANGES" = false ]; then
            VERSION_INFO="\nNo version changes detected in this PR.\n"
          fi
          
          # Add legend
          VERSION_INFO+="\n**Legend**: üî¥ major | üü° minor | üü¢ patch | new crate"
          
          # Output the version info
          echo "versions<<EOF" >> $GITHUB_OUTPUT
          echo -e "$VERSION_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate short changelog
        run: |
          git cliff --output short_changelog.md --from ${{ github.event.pull_request.base.sha }} --to ${{ github.sha }}
          short_changelog=$(cat short_changelog.md)
          echo "short_changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$short_changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: short

      - name: Generate full changelog
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: --output CHANGELOG.md
        env:
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: generate

      - name: Save full changelog content
        run: |
          changelog_content=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: save_changelog

      - name: Update PR with changelog
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## üìù PR Changes
            ${{ steps.short.outputs.short_changelog }}

            ## üì¶ Version Changes
            ${{ steps.versions.outputs.versions }}

            <details>
            <summary>üìú Full Changelog</summary>

            ${{ steps.generate.outputs.changelog }}
            </details>
  generate-docs:
    name: Cargo
    runs-on: ubuntu-latest
    outputs:
      docs-path: ${{ steps.generate.outputs.docs-path }}

    steps:
      # Get the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Rust and documentation tools
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-docs

      # Speed up builds with caching
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: docs

      # Generate documentation
      - name: Generate docs
        id: generate
        run: |
          # Build API documentation for all crates
          cargo doc --no-deps --profile ci --document-private-items --all-features

          # Create docs directory and copy documentation
          mkdir -p target/doc/docs
          cp README.md target/doc/docs/
          cp -r docs/* target/doc/docs/ 2>/dev/null || true

          # Create landing page that redirects to main crate docs
          cat > target/doc/index.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
              <meta http-equiv="refresh" content="0;url=buoy_sim/index.html">
              <title>Buoy Documentation</title>
          </head>
          <body>
              <p>Redirecting to <a href="buoy_sim/index.html">main documentation</a>...</p>
          </body>
          </html>
          EOF

          echo "docs-path=target/doc" >> $GITHUB_OUTPUT

  deploy-docs:
    name: Deploy
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    # Required permissions for GitHub Pages
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      # Get the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: generic

      # Upload the documentation
      - name: Upload docs
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ needs.generate-docs.outputs.docs-path }}

      # Deploy to GitHub Pages
      - name: Deploy
        uses: actions/deploy-pages@v4
