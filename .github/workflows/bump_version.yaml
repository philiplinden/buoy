name: Bump Version

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      crate_names:
        description: 'Comma-separated list of crates to update (leave empty for all crates)'
        required: false
        type: string
        default: ''

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Get all crates
        id: get-crates
        run: |
          # Get all workspace members
          echo "crates=$(cargo metadata --format-version=1 --no-deps |
                         jq -r '.workspace_members[] | split(" ")[0]' |
                         jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT
          echo "Found crates: ${{ steps.get-crates.outputs.crates }}"

      - name: Validate crate names
        id: validate-crates
        if: ${{ inputs.crate_names != '' }}
        run: |
          # Convert comma-separated list to array
          IFS=',' read -ra INPUT_CRATES <<< "${{ inputs.crate_names }}"
          VALID_CRATES=()

          # Check each crate exists
          for crate in "${INPUT_CRATES[@]}"; do
            crate=$(echo "$crate" | xargs)  # Trim whitespace
            if echo '${{ steps.get-crates.outputs.crates }}' | jq -e --arg crate "$crate" '.[] | select(. == $crate)' > /dev/null; then
              VALID_CRATES+=("$crate")
            else
              echo "::warning::Crate '$crate' not found in workspace"
            fi
          done

          if [ ${#VALID_CRATES[@]} -eq 0 ]; then
            echo "::error::No valid crates specified"
            exit 1
          fi

          # Output as JSON array
          printf -v CRATES_JSON '"%s",' "${VALID_CRATES[@]}"
          echo "crates_to_bump=[${CRATES_JSON%,}]" >> $GITHUB_OUTPUT
          echo "Will update crates: ${VALID_CRATES[*]}"

      - name: Bump versions
        id: bump-versions
        run: |
          BUMP_TYPE=${{ inputs.bump_type }}
          OLD_VERSIONS=""

          if [ -z "${{ inputs.crate_names }}" ]; then
            echo "Bumping all crates with $BUMP_TYPE version bump"
            # Get current versions before bumping
            OLD_VERSIONS=$(cargo metadata --format-version=1 --no-deps |
                          jq -r '.packages[] | select(.publish != false) | "\(.name)=\(.version)"' |
                          jq -R -s -c 'split("\n") | map(select(. != ""))')
            cargo set-version --workspace $BUMP_TYPE
          else
            # Parse the JSON array of crates
            CRATES=$(echo '${{ steps.validate-crates.outputs.crates_to_bump }}' | jq -r '.[]')
            for CRATE in $CRATES; do
              # Get current version before bumping
              OLD_VERSION=$(cargo metadata --format-version=1 --no-deps |
                           jq -r --arg crate "$CRATE" '.packages[] | select(.name == $crate) | .version')
              OLD_VERSIONS+="$CRATE=$OLD_VERSION"$'\n'
              echo "Bumping $CRATE with $BUMP_TYPE version bump (from $OLD_VERSION)"
              cargo set-version --package "$CRATE" $BUMP_TYPE
            done
            OLD_VERSIONS=$(echo "$OLD_VERSIONS" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          fi

          # Update the lockfile
          cargo update --workspace

          # Output old versions for the PR
          echo "old_versions=$OLD_VERSIONS" >> $GITHUB_OUTPUT

      - name: Get new versions
        id: new-versions
        run: |
          if [ -z "${{ inputs.crate_names }}" ]; then
            # Get all crates
            VERSIONS=$(cargo metadata --format-version=1 --no-deps |
                      jq -r '.packages[] | select(.publish != false) | "\(.name)=\(.version)"' |
                      jq -R -s -c 'split("\n") | map(select(. != ""))')
          else
            # Get only the crates we bumped
            CRATES=$(echo '${{ steps.validate-crates.outputs.crates_to_bump }}' | jq -r '.[]')
            VERSIONS=""
            for CRATE in $CRATES; do
              VERSION=$(cargo metadata --format-version=1 --no-deps |
                       jq -r --arg crate "$CRATE" '.packages[] | select(.name == $crate) | .version')
              VERSIONS+="$CRATE=$VERSION"$'\n'
            done
            VERSIONS=$(echo "$VERSIONS" | jq -R -s -c 'split("\n") | map(select(. != ""))')
          fi
          echo "new_versions=$VERSIONS" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump ${{ inputs.crate_names || 'all crates' }} version (${{ inputs.bump_type }})"
          title: "chore: bump ${{ inputs.crate_names || 'all crates' }} version (${{ inputs.bump_type }})"
          body: |
            ## Version Bumps

            ${{ fromJSON(steps.bump-versions.outputs.old_versions) | map('* ' + .) | join('\n') }}
            â†“
            ${{ fromJSON(steps.new-versions.outputs.new_versions) | map('* ' + .) | join('\n') }}

            Triggered by: @${{ github.actor }}
          branch: "bump/${{ github.run_id }}"
          delete-branch: true
          base: main
          draft: false
