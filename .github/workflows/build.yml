name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  # The base filename of the binary produced by `cargo build`.
  cargo_build_binary_name: buoy

  # The path to the assets directory.
  assets_path: assets

  # Whether to build and package a release for a given target platform.
  build_for_web: false
  build_for_linux: true
  build_for_windows: true
  build_for_macos: true

  # Whether to upload the packages produced by this workflow to a GitHub release.
  upload_to_github: false

  ############
  # ADVANCED #
  ############

  # The ID of the app produced by this workflow.
  # Applies to macOS releases.
  # Must contain only A-Z, a-z, 0-9, hyphen, and period: <https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier>.
  app_id: philiplinden.buoy

  # The base filename of the binary in the package produced by this workflow.
  # Applies to Windows, macOS, and Linux releases.
  # Defaults to `cargo_build_binary_name` if commented out.
  #app_binary_name: buoy

  # The name of the `.zip` or `.dmg` file produced by this workflow.
  # Defaults to `app_binary_name` if commented out.
  #app_package_name: buoy

  # The display name of the app produced by this workflow.
  # Applies to macOS releases.
  # Defaults to `app_package_name` if commented out.
  #app_display_name: buoy

  # The short display name of the app produced by this workflow.
  # Applies to macOS releases.
  # Must be 15 or fewer characters: <https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundlename>.
  # Defaults to `app_display_name` if commented out.
  #app_short_name: buoy

  # Before enabling LFS, please take a look at GitHub's documentation for costs and quota limits:
  # <https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-storage-and-bandwidth-usage>
  git_lfs: false

  # Enabling this only helps with consecutive releases to the same tag (and takes up cache storage space).
  # See: <https://github.com/orgs/community/discussions/27059>.
  use_github_cache: true

  # Reduce compile time.
  RUSTFLAGS: -Awarnings -Zshare-generics=y -Zthreads=0

jobs:
  # Forward some environment variables as outputs of this job.
  # This is needed because the `env` context can't be used in the `if:` condition of a job:
  # <https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability>
  forward-env:
    runs-on: ubuntu-latest
    steps:
      - name: Do nothing
        run: "true"
    outputs:
      upload_to_itch: ${{ env.upload_to_itch }}

  # Determine the version number for this workflow.
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Determine version number
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "${GITHUB_OUTPUT}"
    outputs:
      # Use the input from workflow dispatch, or fall back to the git tag.
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  # Build and package a release for each platform.
  build:
    needs:
      - get-version
    env:
      version: ${{ needs.get-version.outputs.version }}
      # Avoid rate-limiting. See: <https://github.com/cargo-bins/cargo-binstall/issues/2045>.
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        include:
          - platform: web
            targets: wasm32-unknown-unknown
            package_ext: .zip
            runner: ubuntu-latest

          - platform: linux
            targets: x86_64-unknown-linux-gnu
            package_ext: .zip
            runner: ubuntu-latest

          - platform: windows
            targets: x86_64-pc-windows-msvc
            binary_ext: .exe
            package_ext: .zip
            runner: windows-latest

          - platform: macos
            targets: x86_64-apple-darwin aarch64-apple-darwin
            app_suffix: .app/Contents/MacOS
            package_ext: .dmg
            runner: macos-latest
    runs-on: ${{ matrix.runner }}
    permissions:
      # Required to create a GitHub release: <https://docs.github.com/en/rest/releases/releases#create-a-release>.
      contents: write
    defaults:
      run:
        shell: bash

    steps:
      - name: Set up environment
        run: |
          # Default values:
          echo "app_binary_name=${app_binary_name:=${{ env.cargo_build_binary_name }}}" >> "${GITHUB_ENV}"
          echo "app_package_name=${app_package_name:=${app_binary_name}}" >> "${GITHUB_ENV}"
          echo "app_display_name=${app_display_name:=${app_package_name}}" >> "${GITHUB_ENV}"
          echo "app_short_name=${app_short_name:=${app_display_name}}" >> "${GITHUB_ENV}"

          # File paths:
          echo "app=tmp/app/${app_package_name}"'${{ matrix.app_suffix }}' >> "${GITHUB_ENV}"
          echo "package=${app_package_name}-"'${{ matrix.platform }}${{ matrix.package_ext }}' >> "${GITHUB_ENV}"

          # macOS environment:
          if [ '${{ matrix.platform }}' = 'macos' ]; then
            echo 'MACOSX_DEPLOYMENT_TARGET=11.0' >> "${GITHUB_ENV}" # macOS 11.0 Big Sur is the first version to support universal binaries.
            echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> "${GITHUB_ENV}"
          fi

          # Check if building for this platform is enabled.
          echo 'is_platform_enabled=${{
            (matrix.platform == 'web' && env.build_for_web == 'true') ||
            (matrix.platform == 'linux' && env.build_for_linux == 'true') ||
            (matrix.platform == 'windows' && env.build_for_windows == 'true') ||
            (matrix.platform == 'macos' && env.build_for_macos == 'true')
          }}' >> "${GITHUB_ENV}"

      - name: Checkout repository
        if: ${{ env.is_platform_enabled == 'true' }}
        uses: actions/checkout@v4
        with:
          lfs: ${{ env.git_lfs }}

      - name: Install Rust toolchain
        if: ${{ env.is_platform_enabled == 'true' }}
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.targets }}

      - name: Restore Rust cache
        if: ${{ env.is_platform_enabled == 'true' && env.use_github_cache == 'true' }}
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install build dependencies (Linux)
        if: ${{ env.is_platform_enabled == 'true' && matrix.platform == 'linux' }}
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev

      - name: Prepare output directories
        if: ${{ env.is_platform_enabled == 'true' }}
        run: rm -rf tmp; mkdir -p tmp/binary '${{ env.app }}'

      - name: Install cargo-binstall
        if: ${{ env.is_platform_enabled == 'true' }}
        uses: cargo-bins/cargo-binstall@main

      - name: Install Bevy CLI
        if: ${{ env.is_platform_enabled == 'true' }}
        run: cargo binstall --locked --no-confirm --force --git='https://github.com/TheBevyFlock/bevy_cli' bevy_cli

      - name: Build and add web bundle to app (Web)
        if: ${{ env.is_platform_enabled == 'true' && matrix.platform == 'web' }}
        run: |
          cargo binstall --locked --no-confirm --force wasm-bindgen-cli
          cargo binstall --locked --no-confirm --force wasm-opt
          bevy build --locked --release --features='${{ matrix.features }}' --yes web --bundle
          mv 'target/bevy_web/web-release/${{ env.cargo_build_binary_name }}' '${{ env.app }}'

      - name: Build and add binaries to app (non-Web)
        if: ${{ env.is_platform_enabled == 'true' && matrix.platform != 'web' }}
        run: |
          for target in ${{ matrix.targets }}; do
            bevy build --locked --release --target="${target}" --features='${{ matrix.features }}'
            mv target/"${target}"/release/'${{ env.cargo_build_binary_name }}${{ matrix.binary_ext }}' tmp/binary/"${target}"'${{ matrix.binary_ext }}'
          done
          if [ '${{ matrix.platform }}' = 'macos' ]; then
            lipo tmp/binary/*'${{ matrix.binary_ext }}' -create -output '${{ env.app }}/${{ env.app_binary_name }}${{ matrix.binary_ext }}'
          else
            mv tmp/binary/*'${{ matrix.binary_ext }}' '${{ env.app }}/${{ env.app_binary_name }}${{ matrix.binary_ext }}'
          fi
