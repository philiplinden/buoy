name: Changelog

on:
  pull_request:
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '.github/workflows/*.yaml'

jobs:
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Get changed crates and versions
        id: versions
        run: |
          # Get changed files in this PR
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }} -- "**/*.rs" "**/Cargo.toml" 2>/dev/null || echo "")

          # Find all crates with changes
          CHANGED_CRATES=()
          for file in $CHANGED_FILES; do
            dir=$(dirname "$file")
            while [ "$dir" != "." ]; do
              if [ -f "$dir/Cargo.toml" ]; then
                CRATE_NAME=$(grep -m1 '^name = ' "$dir/Cargo.toml" | cut -d'"' -f2)
                if [[ ! " ${CHANGED_CRATES[*]} " =~ " $CRATE_NAME " ]]; then
                  CHANGED_CRATES+=("$CRATE_NAME")
                fi
                break
              fi
              dir=$(dirname "$dir")
            done
          done

          # Get versions from base branch
          git fetch origin main
          git checkout main

          # Get all workspace members
          IFS=$'\n' read -d '' -r -a members < <(grep -o '"[^"]*"' crates/*/Cargo.toml | tr -d '"')

          # Switch back to PR branch
          git checkout ${{ github.sha }}

          VERSION_INFO="\n"

          for member in "${members[@]}"; do
            # Get versions from both branches
            version_file="crates/$member/Cargo.toml"
            if [ -f "$version_file" ]; then
              current_version=$(grep -m1 '^version = ' "$version_file" | cut -d'"' -f2)
              git checkout main
              main_version=$(grep -m1 '^version = ' "$version_file" | cut -d'"' -f2)
              git checkout ${{ github.sha }}

              # If versions differ or if it's a new crate
              if [ "$current_version" != "$main_version" ] || [ ! -f "$version_file" ]; then
                # Determine version change type
                if [ "$main_version" = "0.0.0" ]; then
                  emoji="üü¢"
                  change_type="new crate"
                else
                  main_major=$(echo $main_version | cut -d'.' -f1)
                  current_major=$(echo $current_version | cut -d'.' -f1)

                  if [ "$current_major" -gt "$main_major" ]; then
                    emoji="üî¥"
                    change_type="major bump"
                  else
                    main_minor=$(echo $main_version | cut -d'.' -f2)
                    current_minor=$(echo $current_version | cut -d'.' -f2)

                    if [ "$current_minor" -gt "$main_minor" ]; then
                      emoji="üü°"
                      change_type="minor bump"
                    else
                      emoji="üü¢"
                      change_type="patch bump"
                    fi
                  fi
                fi

                VERSION_INFO+="- $emoji **$member**: $main_version ‚Üí $current_version ($change_type)\n"
              fi
            fi
          done

          # Add legend
          VERSION_INFO+="\n**Legend**: üî¥ major | üü° minor | üü¢ patch | new crate"

          echo "versions<<EOF" >> $GITHUB_OUTPUT
          echo -e "$VERSION_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate short changelog
        run: |
          git cliff --output short_changelog.md --from ${{ github.event.pull_request.base.sha }} --to ${{ github.sha }}
          short_changelog=$(cat short_changelog.md)
          echo "short_changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$short_changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        id: short

      - name: Generate full changelog
        uses: orhun/git-cliff-action@v3
        with:
          config: cliff.toml
          args: --output CHANGELOG.md
        env:
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: generate
        run: |
          changelog_content=$(cat CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR with changelog
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## üìù PR Changes
            ${{ steps.short.outputs.short_changelog }}

            ## üì¶ Version Changes
            ${{ steps.versions.outputs.versions }}

            <details>
            <summary>üìú Full Changelog</summary>

            ${{ steps.generate.outputs.changelog }}
            </details>
