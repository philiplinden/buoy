[workspace]
resolver = "2" # Important for Bevy
members = [
    # Common functionality
    "crates/buoy_common",

    # Physics and simulation
    "crates/buoy_physics",
    "crates/buoy_atmo",
    "crates/buoy_aero",

    # Application
    "crates/buoy_sim",
]

default-members = ["crates/buoy_sim"]

[workspace.package]
version = "0.1.0"
authors = ["Philip Linden <lindenphilipj@gmail.com>"]
readme = "README.md"
edition = "2024"
license = "MIT or Apache-2.0"
license-file = "LICENSE-APACHE"

[workspace.dependencies]
# Shared dependencies with fixed versions
bevy = { version = "0.16.1", default-features = false, features = [
    "std",            # we are not using no-std
    "bevy_state",     # needed for working with Bevy states
    "bevy_render",    # needed for working with meshes, even without rendering to the screen
    "bevy_asset",     # needed for working with assets, including configs
    "bevy_log",       # needed for logging and tracing
    "async_executor", # a default feature for task execution
    "multi_threaded", # performance enhancement, normally a default feature
    "track_location", # Improve error messages coming from Bevy
] }

# Physics engine.
avian3d = "0.3.1"
# Remote protocol for interfacing with Bevy.
bevy_remote = "0.16.1"
# Physical units library for unit conversions and calculations.
uom = "0.37.0"
# Property-based testing
proptest = "1.7.0"
# Tracing for logging.
tracing = { version = "0.1.41", features = [
    "attributes",             # For function tracing
    "log",                    # For compatibility with Bevy's logging
    "release_max_level_warn", # Performance optimization
] }
tracing-subscriber = "0.3.19"

# TIP FROM TheBevyFlock/bevy_new_2d:
# Your web builds will start failing if you add a dependency that pulls in `getrandom` v0.3+.
# To fix this, you should tell `getrandom` to use the `wasm_js` backend on Wasm.
# See: <https://docs.rs/getrandom/0.3.3/getrandom/#webassembly-support>.
#[target.wasm32-unknown-unknown.dependencies]
#getrandom = { version = "0.3", features = ["wasm_js"] }
# In addition to enabling the `wasm_js` feature, you need to include `--cfg 'getrandom_backend="wasm_js"'`
# in your rustflags for both local and CI/CD web builds, taking into account that rustflags specified in
# multiple places are NOT combined (see <https://github.com/rust-lang/cargo/issues/5376>).
# Alternatively, you can opt out of the rustflags check with this patch:
#[patch.crates-io]
#getrandom = { git = "https://github.com/benfrankel/getrandom" }


[workspace.metadata.bevy_cli]
default_run = "buoy"
# Enable debug stepping for physics simulation debugging
debug_stepping = true
# Enable hot reloading for faster development
hot_reload = true
# Enable asset watching for configuration files
watch_assets = true

[workspace.metadata.bevy_cli.release]
# Disable dev features for release builds
default-features = false
# Enable optimizations for physics calculations
opt-level = 3

[workspace.metadata.bevy_cli.web]
# Disable native features for web builds
default-features = false
# Enable web-specific optimizations
opt-level = "s"

[workspace.metadata.bevy_cli.web.dev]
features = ["dev"]
# Enable web debugging tools
debug = true

# Configure Bevy lints for physics simulation
[workspace.metadata.bevy_lint]
# Deny panics in physics calculations
panicking_methods = "deny"
# Enable pedantic warnings for numerical accuracy
pedantic = "warn"
# Warn about potential floating point precision issues
float_cmp = "warn"
# Warn about potential performance issues in hot paths
performance = "warn"

# Compile with Performance Optimizations:
# https://bevyengine.org/learn/quick-start/getting-started/setup/#compile-with-performance-optimizations

# Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Remove expensive debug assertions due to <https://github.com/bevyengine/bevy/issues/14291>
[profile.dev.package.wgpu-types]
debug-assertions = false

# Enable dynamic linking in dev profile
[profile.dev.package.bevy]
default-features = false
features = [
    "std",             # we are not using no-std
    "bevy_state",      # needed for working with Bevy states
    "bevy_render",     # needed for working with meshes, even without rendering to the screen
    "bevy_asset",      # needed for working with assets, including configs
    "bevy_log",        # needed for logging and tracing
    "async_executor",  # a default feature for task execution
    "multi_threaded",  # performance enhancement, normally a default feature
    "track_location",  # Improve error messages coming from Bevy
    "dynamic_linking", # Improve compile times for dev builds by linking Bevy as a dynamic library
]

[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"

# This profile will be used by `bevy run web` automatically.
[profile.web-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compile times, great improvements to file size and runtime performance.
opt-level = "s"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"

# Optimize for build time in CI.
[profile.ci]
inherits = "dev"
incremental = true
codegen-units = 16
opt-level = 1
debug = true
debug-assertions = true
overflow-checks = true
lto = false
