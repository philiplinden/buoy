[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
"""

# template for the changelog body
body = """
{% if version %}\
## [{{ version }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
## [Unreleased]
{% endif %}\

{% for group, commits in commits | filter(attribute="merge_commit", value=false) | group_by(attribute="group") %}
### {{ group | striptags | trim | upper_first }}
{% for commit in commits | unique(attribute="message") %}
- {{ commit.message | upper_first }}
{% endfor %}

{% endfor %}
"""

# template for the changelog footer
footer = """
{% if version %}
[{{ version }}]: https://github.com/philiplinden/buoy/compare/{{ previous.version }}...{{ version }}
{% else %}
[Unreleased]: https://github.com/philiplinden/buoy/compare/{{ previous.version | default("v0.1.0") }}...HEAD
{% endif %}
"""

[git]
# parse conventional commits
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false

# pre-process commit messages
commit_preprocessors = [
    # Linkify issue/PR references
    { pattern = '\\((\\w+\\s)?#([0-9]+)\\)', replace = "([#${2}](https://github.com/philiplinden/buoy/issues/${2}))" },
    { pattern = '\\b(close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved) #(\\d+)\\b', replace = "[${1} #${2}](https://github.com/philiplinden/buoy/issues/${2})" },
    # Clean up whitespace
    { pattern = '\\s+', replace = ' ' },
]

# Define commit parsers with ordered groups and emojis
commit_parsers = [
    # Skip empty commit bodies
    { body = "^$", skip = true },

    # Breaking changes first
    { message = "^!", group = "<!-- 0 -->🚨 Breaking Changes" },

    # Features
    { message = "^feat", group = "<!-- 1 -->✨ Features" },

    # Bug fixes
    { message = "^fix", group = "<!-- 2 -->🐛 Bug Fixes" },

    # Performance improvements
    { message = "^perf", group = "<!-- 3 -->⚡ Performance" },

    # Documentation
    { message = "^docs", group = "<!-- 4 -->📝 Documentation" },

    # Refactoring
    { message = "^refactor", group = "<!-- 5 -->♻️ Refactoring" },

    # Testing
    { message = "^test", group = "<!-- 6 -->✅ Tests" },

    # Style changes
    { message = "^style", group = "<!-- 7 -->💄 Styles" },

    # CI/CD
    { message = "^ci", group = "<!-- 8 -->👷 CI/CD" },

    # Build system
    { message = "^build", group = "<!-- 9 -->📦 Build" },

    # Chores
    { message = "^chore", group = "<!-- 10 -->🔧 Chores" },

    # Reverts
    { message = "^revert", group = "<!-- 11 -->⏪ Reverts" },

    # Default catch-all (shouldn't happen with filter_unconventional = true)
    { message = ".*", group = "📦 Other Changes" },
]

# GitHub integration for PR labels
[git.github]
# Use GitHub PR labels as groups (fallback to commit types)
commit_parsers = [
    { field = "github.pr_labels", pattern = "breaking-change", group = "<!-- 0 -->🚨 Breaking Changes" },
    { field = "github.pr_labels", pattern = "enhancement", group = "<!-- 1 -->✨ Features" },
    { field = "github.pr_labels", pattern = "bug", group = "<!-- 2 -->🐛 Bug Fixes" },
    { field = "github.pr_labels", pattern = "documentation", group = "<!-- 4 -->📝 Documentation" },
    { field = "github.pr_labels", pattern = "refactor", group = "<!-- 5 -->♻️ Refactoring" },
    { field = "github.pr_labels", pattern = "dependencies", group = "<!-- 9 -->📦 Dependencies" },
]

# Protect breaking changes from being skipped
protect_breaking_commits = true
filter_commits = true

# Tag configuration
tag_pattern = "v[0-9]*"
skip_tags = "^$"
ignore_tags = "^$"
topo_order = false

# Sort commits with newest first
sort_commits = "newest"

[workspace]
path = "."
changelog_path = "CHANGELOG.md"

# Post-processing for the changelog
[output]
# Group commits by scope within each section
group_commits = true
# Include commit hashes in the changelog
include_commit_hashes = true
# Include commit authors in the changelog
include_commit_authors = true
# path to the git directory
git_path = "."
# path to the workspace members
members = [
    "crates/buoy_common",
    "crates/buoy_physics",
    "crates/buoy_aero",
    "crates/buoy_atmo",
    "crates/buoy_sim",
]
